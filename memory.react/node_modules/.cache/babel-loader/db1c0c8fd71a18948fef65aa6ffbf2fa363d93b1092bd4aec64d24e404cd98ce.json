{"ast":null,"code":"var _jsxFileName = \"/Users/dev/PhpstormProjects/memoryreact/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Title from './components/src/title';\nimport Button from './components/src/button';\nimport Card from './components/src/card';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedIndices, setMatchedIndices] = useState([]);\n  const [victory, setVictory] = useState(false);\n  const [moves, setMoves] = useState(0);\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  function initializeGame() {\n    const imageNames = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    const initialCards = imageNames.concat(imageNames).map((imageName, index) => ({\n      id: index,\n      symbol: `/${imageName}.jpg`,\n      flipped: false\n    })); // Utilisation des noms de fichiers des images\n\n    initialCards.sort(() => Math.random() - 0.5);\n    setCards(initialCards);\n    setFlippedIndices([]);\n    setMatchedIndices([]);\n    setVictory(false);\n    setMoves(0);\n  }\n  function handleCardClick(index) {\n    if (flippedIndices.length === 2 || matchedIndices.includes(index)) return;\n    setFlippedIndices([...flippedIndices, index]);\n    if (flippedIndices.length === 1) {\n      setTimeout(() => checkForMatch(), 1000);\n      setMoves(moves + 1);\n    }\n  }\n  function checkForMatch() {\n    const [firstIndex, secondIndex] = flippedIndices;\n    const newCards = [...cards];\n\n    // Vérifier si les indices sont valides\n    if (cards[firstIndex] && cards[secondIndex]) {\n      if (cards[firstIndex].symbol === cards[secondIndex].symbol) {\n        setMatchedIndices([...matchedIndices, firstIndex, secondIndex]);\n      }\n      newCards[firstIndex].flipped = false;\n      newCards[secondIndex].flipped = false;\n    }\n    setCards(newCards);\n    setFlippedIndices([]);\n    checkForVictory();\n  }\n  function checkForVictory() {\n    if (matchedIndices.length === cards.length) {\n      setVictory(true);\n    }\n  }\n  function handleRestart() {\n    initializeGame();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memory-game\",\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      text: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-grid\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        onClick: () => handleCardClick(index),\n        flipped: flippedIndices.includes(index) || matchedIndices.includes(index),\n        value: card.symbol\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Moves: \", moves]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), victory && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Congratulations! You've won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleRestart,\n        text: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"QAxNajjuKnf1rVrHTV27YVlLhOs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Title","Button","Card","jsxDEV","_jsxDEV","App","_s","cards","setCards","flippedIndices","setFlippedIndices","matchedIndices","setMatchedIndices","victory","setVictory","moves","setMoves","initializeGame","imageNames","initialCards","concat","map","imageName","index","id","symbol","flipped","sort","Math","random","handleCardClick","length","includes","setTimeout","checkForMatch","firstIndex","secondIndex","newCards","checkForVictory","handleRestart","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","card","onClick","value","_c","$RefreshReg$"],"sources":["/Users/dev/PhpstormProjects/memoryreact/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Title from './components/src/title';\nimport Button from './components/src/button';\nimport Card from './components/src/card';\nimport './styles.css';\n\nfunction App() {\n    const [cards, setCards] = useState([]);\n    const [flippedIndices, setFlippedIndices] = useState([]);\n    const [matchedIndices, setMatchedIndices] = useState([]);\n    const [victory, setVictory] = useState(false);\n    const [moves, setMoves] = useState(0);\n\n    useEffect(() => {\n        initializeGame();\n    }, []);\n\n    function initializeGame() {\n        const imageNames = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n        const initialCards = imageNames\n            .concat(imageNames)\n            .map((imageName, index) => ({ id: index, symbol: `/${imageName}.jpg`, flipped: false })); // Utilisation des noms de fichiers des images\n\n        initialCards.sort(() => Math.random() - 0.5);\n\n        setCards(initialCards);\n        setFlippedIndices([]);\n        setMatchedIndices([]);\n        setVictory(false);\n        setMoves(0);\n    }\n\n\n    function handleCardClick(index) {\n        if (flippedIndices.length === 2 || matchedIndices.includes(index)) return;\n\n        setFlippedIndices([...flippedIndices, index]);\n\n        if (flippedIndices.length === 1) {\n            setTimeout(() => checkForMatch(), 1000);\n            setMoves(moves + 1);\n        }\n    }\n\n    function checkForMatch() {\n        const [firstIndex, secondIndex] = flippedIndices;\n        const newCards = [...cards];\n\n        // Vérifier si les indices sont valides\n        if (cards[firstIndex] && cards[secondIndex]) {\n            if (cards[firstIndex].symbol === cards[secondIndex].symbol) {\n                setMatchedIndices([...matchedIndices, firstIndex, secondIndex]);\n            }\n\n            newCards[firstIndex].flipped = false;\n            newCards[secondIndex].flipped = false;\n        }\n\n        setCards(newCards);\n        setFlippedIndices([]);\n        checkForVictory();\n    }\n\n    function checkForVictory() {\n        if (matchedIndices.length === cards.length) {\n            setVictory(true);\n        }\n    }\n\n    function handleRestart() {\n        initializeGame();\n    }\n\n    return (\n        <div className=\"memory-game\">\n            <Title text=\"Memory Game\" />\n            <div className=\"cards-grid\">\n                {cards.map((card, index) => (\n                    <Card\n                        key={card.id}\n                        onClick={() => handleCardClick(index)}\n                        flipped={flippedIndices.includes(index) || matchedIndices.includes(index)}\n                        value={card.symbol}\n                    />\n                ))}\n            </div>\n            <div className=\"info\">\n                <p>Moves: {moves}</p>\n                {victory && <p>Congratulations! You've won!</p>}\n                <Button onClick={handleRestart} text=\"Restart\" />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}